<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tech.ugma.education</groupId>
    <artifactId>wmp-0</artifactId>
    <version>1.0-SNAPSHOT</version>


    <!--The webstart plugin uses this information, so it's important-->
    <name>My Webstart App</name> <!--The full name of the project.-->
    <url>http://localhost:8080</url> <!--This is usually the URL to the project's homepage, but the webstart
    plugin also considers it to be the codebase. If you're not hosting your app on a website yet, this value
     will probably be http://localhost:8080-->

    <!--Put any dependencies your application has (like ControlsFX or LOGBack) in a <dependency> tag here-->
    <dependencies>

        <!--Various Cool GUI Components-->
        <!-- https://mvnrepository.com/artifact/org.controlsfx/controlsfx -->
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>8.40.12</version>
        </dependency>

    </dependencies>

    <properties>
        <!--Whatever is here will get replace all instances of the string '${mainClass}' in the POM-->
        <mainClass>tech.ugma.education.wmp0.Main</mainClass>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <plugins>

            <!--Used for compiling-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!--Will be used to put everything in one jar?-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.3.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>${mainClass}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>


            <!--The webstart plugin; produces the JNLP which you need to put in the same at the same path as your "codebase"-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>webstart-maven-plugin</artifactId>
                <version>1.0-beta-7</version>
                <executions>
                    <execution>
                        <!-- The jnlp-inline goal isn't bound to a phase by default, but it makes it convenient.
                        This binds it to the package phase (so you can build the JNLP by simply calling `mvn package`)-->
                        <phase>package</phase>
                        <goals>
                            <goal>jnlp-inline</goal> <!--(see http://www.mojohaus.org/webstart/webstart-maven-plugin/plugin-info.html)-->
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <!-- Set to true to exclude all transitive dependencies (dependencies of your dependencies).
                    Default is false, so you could get rid of this tag. -->
                    <!--<excludeTransitive>false</excludeTransitive>-->

                    <!-- The path where the libraries are stored within the jnlp structure. -->
                    <!-- By default the libraries are right in the working directory. -->
                    <!-- Putting them in a lib folder keeps things cleaner. -->
                    <libPath>lib</libPath>
                    <outputJarVersions>true</outputJarVersions>

                    <!--This is required because of heightened security; see https://blogs.oracle.com/thejavatutorials/entry/jdk_7u45_and_javafx_2-->
                    <updateManifestEntries>
                        <Permissions>all-permissions</Permissions>
                        <Codebase>*</Codebase>
                    </updateManifestEntries>


                    <!-- JNLP GENERATION -->
                    <jnlp>
                        <!-- default values -->
                        <!--<inputTemplateResourcePath>${project.basedir}</inputTemplateResourcePath>-->
                        <!--<inputTemplate>src/main/jnlp/template.vm</inputTemplate>--> <!-- relative to inputTemplateResourcePath -->

                        <!--<outputFile>app.jnlp</outputFile>--> <!-- defaults to launch.jnlp -->

                        <!-- Used to automatically identify the jar containing the main class. -->
                        <mainClass>${mainClass}</mainClass>
                    </jnlp>



                    <!-- SIGNING -->
                    <!-- A keystore is generated with the given information. -->
                    <!-- That keystore is then used to sign your application and its dependencies -->
                    <!-- Signing the application is necessary to meet Java's security standards-->
                    <!-- What is signing? See: https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html-->
                    <!-- Signing could be done by hand (see: https://docs.oracle.com/javase/tutorial/deployment/jar/signing.html), but automating it makes things much easier-->
                    <sign>
                        <keystore>${project.build.directory}/keystore</keystore>
                        <alias>alias</alias>
                        <validity>10000000</validity>

                        <keypass>m2m2m2</keypass>
                        <storepass>m2m2m2</storepass>

                        <!--This is the timestamp authority. For an explanation, see: https://stackoverflow.com/a/24178906/5432315 .
                        Having your app timestamped will prevent you from having to resign your deployed app.-->
                        <tsaLocation>http://sha256timestamp.ws.symantec.com/sha256/timestamp</tsaLocation>

                        <!--Include your information here-->
                        <dnameCn>www.example.com</dnameCn>
                        <dnameOu>None</dnameOu>
                        <dnameO>ExampleOrg</dnameO>
                        <dnameL>Seattle</dnameL>
                        <dnameSt>Washington</dnameSt>
                        <dnameC>US</dnameC>

                        <keystoreConfig>
                        <delete>true</delete> <!--This will automatically delete the keystore-->
                            <gen>true</gen> <!--This will automatically make a new keystore-->
                        </keystoreConfig>

                        <verify>true</verify>
                    </sign>

                    <!-- BUILDING PROCESS -->

                    <!--pack200 is a compression method. Enabling it can make downloading your application faster
                    for the user; however I have yet to be able to get it to work, so for now I have it disabled.-->
                    <!--<pack200>false</pack200>-->

                    <!-- causes a version attribute to be output in each jar's resource element, optional, default is false -->
                    <!--<outputJarVersions>false</outputJarVersions>-->

                    <verbose>true</verbose>
                </configuration>
            </plugin>
        </plugins>
    </build>


    <!--These are the lists of the remote repositories Maven will use
    for discovering dependencies and extensions.-->
    <repositories>
        <repository>
            <id>jboss</id>
            <url>http://repository.jboss.org/nexus/content/groups/public/</url>
        </repository>
        <repository>
            <id>sonatype</id>
            <url>http://oss.sonatype.org/content/repositories/releases/</url>
        </repository>
    </repositories>


</project>
